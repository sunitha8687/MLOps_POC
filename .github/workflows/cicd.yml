name: CI-CD

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout MLops Repository
      uses: actions/checkout@v1
    - name: Build Docker Container
      run: docker build -t cicdmlops:latest .

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout MLops Repository
      uses: actions/checkout@v1
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
          python-version: '3.10'
    - name: Install Project Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run unit tests
      run: |
        pytest tests -m predict
        pytest tests -m preprocess
        pytest tests -m evaluate
    - name: Run integration test
      run: |
        pytest tests -m integration

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the tagged Docker image to ECR
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
          IMAGE_TAG: latest
          VERSION: v1.20230801
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION